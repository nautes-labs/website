(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{295:function(t,e,a){"use strict";a.r(e);var s=a(14),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"维护代码库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护代码库"}},[t._v("#")]),t._v(" 维护代码库")]),t._v(" "),e("p",[t._v("在开始本节之前，请确保您已阅读 "),e("RouterLink",{attrs:{to:"/guide/user-guide/user-guide-00.html"}},[t._v("概述")]),t._v(" 章节，了解创建运行时环境的主流程和相关术语；并且已经创建了至少一个产品，详情参见 "),e("RouterLink",{attrs:{to:"/guide/user-guide/user-guide-01.html"}},[t._v("维护产品")]),t._v("。")],1),t._v(" "),e("p",[t._v("代码库用于存储产品的相关代码，例如源代码、CI流水线的代码、部署配置的代码等。一个产品可以包含多个代码库，一个代码库可以属于一个项目或者不关联项目。此外，维护代码库的用户即可以是产品成员和项目成员。")]),t._v(" "),e("p",[t._v("下面将详细介绍如何维护代码库以及相关规则。维护代码库有多种方式，包括命令行、API 接口等，下文将描述通过 API 接口的方式维护代码库。")]),t._v(" "),e("h2",{attrs:{id:"维护代码库-api-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护代码库-api-接口"}},[t._v("#")]),t._v(" 维护代码库（API 接口）")]),t._v(" "),e("h3",{attrs:{id:"创建代码库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建代码库"}},[t._v("#")]),t._v(" 创建代码库")]),t._v(" "),e("p",[t._v("产品创建成功之后，使用代码库以存储产品的相关代码。步骤如下：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("访问 "),e("RouterLink",{attrs:{to:"/guide/user-guide/quickstart-03.html"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.coderepo.v1.CodeRepo；选择 POST 接口，点击 try it out，在 product_name 参数中输入产品名称，在 coderepo_name 参数中输入代码库名称，点击 execute，生成 API 请求的代码示例。")],1)]),t._v(" "),e("li",[e("p",[t._v("获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 "),e("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Personal access tokens"),e("OutboundLink")],1),t._v("。只有 owner 和 maintainer 角色的产品成员、GitLab 管理员才可以创建代码库。")])]),t._v(" "),e("li",[e("p",[t._v("将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 请求以新增代码库。更新后的 API 请求的代码示例：")]),t._v(" "),e("div",{staticClass:"language-Shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 实操过程中根据实际情况替换 URL 地址和相关参数")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# “project”是代码库的关联项目，“webhook.events”是代码库 webhook 的监听事件，“deployment_runtime、pipeline_runtime”表示是否用于特定类型的运行时")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# “git.gitlab.name”是代码库名称，“git.gitlab.path” 是代码库路径，“git.gitlab.visibility”是代码库可见性，比如 private 或者 public ")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-X")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HTTP://xxx.xxx.xxx.xxx:xxxxx/api/v1/products/product-demo/coderepos/coderepo-demo'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'accept: application/json'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type: application/json'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxx'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n "project": "project-demo",\n "webhook": {\n     "events": ["push_events"]\n },\n "deployment_runtime": true,\n "pipeline_runtime": false,\n "git": {\n     "gitlab": {\n         "name": "coderepo-demo",\n         "path": "coderepo-demo",\n         "visibility": "private",\n         "description": "coderepo-demo"\n         }\n     }\n }\'')]),t._v("\n")])])]),e("p",[t._v("请求成功后，将在产品对应的 GitLab group 中新增代码库，并在产品对应的 default.project 代码库中生成关联产品的代码库资源文件。")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nautes.resource.nautes.io/v1alpha1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CodeRepo\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" coderepo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("namespace\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("codeRepoProvider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gitlab"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploymentRuntime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pipelineRuntime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("product")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"product-demo"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("project")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"project-demo"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("repoName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coderepo-demo"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/myusername/coderepo-demo.git"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("webhook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("events")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"push"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pull_request"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("isolation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),t._v("\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"更新代码库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新代码库"}},[t._v("#")]),t._v(" 更新代码库")]),t._v(" "),e("p",[t._v("代码库创建成功后，可以修改代码库。详情参考 "),e("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%BA%93"}},[t._v("创建代码库")]),t._v("。只有 owner 和 maintainer 角色的产品成员、GitLab 管理员才可以更新代码库资源。"),e("br"),t._v("\n请求成功后，除了更新代码库，也将更新存储在产品对应的default.project 代码库中的代码库资源文件。")]),t._v(" "),e("h3",{attrs:{id:"删除代码库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除代码库"}},[t._v("#")]),t._v(" 删除代码库")]),t._v(" "),e("p",[t._v("由于代码库可能关联多个资源，在删除代码库之前，需要先删除关联该代码库的所有相关资源，例如部署运行时等。步骤如下：")]),t._v(" "),e("ol",[e("li",[t._v("访问 "),e("RouterLink",{attrs:{to:"/guide/user-guide/quickstart-03.html"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.coderepo.v1.CodeRepo；选择 DELETE 接口，点击 try it out，在 product_name 参数中输入产品名称，在 coderepo_name 参数中输入代码库名称，点击 execute，生成 API 请求的代码示例。详情参考 "),e("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%BA%93"}},[t._v("创建代码库的步骤1")]),t._v(" 。")],1),t._v(" "),e("li",[t._v("获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 "),e("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Personal access tokens"),e("OutboundLink")],1),t._v("。只有 owner 角色的产品成员或项目成员、GitLab 管理员才可以删除代码库。")]),t._v(" "),e("li",[t._v("将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 来删除代码库。请求成功后，代码库及其资源文件将被删除。")])]),t._v(" "),e("h3",{attrs:{id:"查询代码库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询代码库"}},[t._v("#")]),t._v(" 查询代码库")]),t._v(" "),e("p",[t._v("查询代码库有两个 API 接口，分别是查询代码库列表、查询代码库详情。"),e("br"),t._v("\n查询代码库列表的步骤如下：")]),t._v(" "),e("ol",[e("li",[t._v("访问 "),e("RouterLink",{attrs:{to:"/guide/user-guide/quickstart-03.html"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.coderepo.v1.CodeRepo；选择相对路径是 /api/v1/products/{products_name}/coderepos 的 GET 接口，点击 try it out，在 product_name 参数中输入产品名称，点击 execute，生成 API 请求的代码示例。详情参考 "),e("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%BA%93"}},[t._v("创建代码库的步骤1")]),t._v("。")],1),t._v(" "),e("li",[t._v("获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 "),e("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Personal access tokens"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("li",[t._v("将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 以查询代码库。请求成功后，如果用户是产品成员或者产品中的项目成员，将返回代码库信息。")])]),t._v(" "),e("p",[t._v("查询代码库详情的步骤如下：")]),t._v(" "),e("ol",[e("li",[t._v("访问 "),e("RouterLink",{attrs:{to:"/guide/user-guide/quickstart-03.html"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.coderepo.v1.CodeRepo；选择相对路径是 /api/v1/products/{products_name}/coderepos/{coderepo_name} 的 GET 接口，点击 try it out，在 product_name 参数中输入产品名称，在 coderepo_name 参数中输入代码库名称，点击 execute，生成 API 请求的代码示例。详情参考 "),e("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%BA%93"}},[t._v("创建代码库的步骤1")]),t._v("。")],1),t._v(" "),e("li",[t._v("其余步骤与“查询代码库列表”相同，不再赘述。")])]),t._v(" "),e("h2",{attrs:{id:"强制提交代码库-api-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制提交代码库-api-接口"}},[t._v("#")]),t._v(" 强制提交代码库（API 接口）")]),t._v(" "),e("p",[t._v("为了保证 Nautes 监听的产品配置清单符合既定规则，以便 Nautes 基于产品配置清单能够自动部署产品的运行时环境。因此，提交 API 请求时默认对产品配置清单中的所有资源文件启用校验，如果校验不通过，则不能提交请求。\n但在实际操作过程中，用户可能通过 Git CLI 或者 GitLab Web IDE 等渠道提交不符合既定规则的资源文件，例如创建集群不存在的环境、创建项目不存在的代码库等，为了兼容不合规资源的场景，POST 和 DELETE 类型的请求接口可以添加 insecure_skip_check 查询参数，并设置其属性值为 true，表示请求 API 强制提交资源文件，哪怕这个资源文件不符合既定规则。")]),t._v(" "),e("div",{staticClass:"language-Shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以下示例为创建代码库时，设置 project 的属性值不合规，启用 insecure_skip_check 参数以强制提交代码库的资源文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-X")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HTTP://xxx.xxx.xxx.xxx:xxxxx/api/v1/products/coderepo-demo/coderepos/coderepo-demo?insecure_skip_check=true'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'accept: application/json'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type: application/json'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n  "project": "project-demo-invalid",\n  "webhook": {\n    "events": [\n      "push_events"\n    ]\n  },\n  "deployment_runtime": true,\n  "pipeline_runtime": false,\n  "git": {\n    "gitlab": {\n      "name": "coderepo-demo",\n      "path": "coderepo-demo",\n      "visibility": "private",\n      "description": "coderepo-demo"\n    }\n  }\n}\'')]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);