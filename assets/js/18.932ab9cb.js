(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{290:function(a,t,e){"use strict";e.r(t);var s=e(14),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"部署一个应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署一个应用"}},[a._v("#")]),a._v(" 部署一个应用")]),a._v(" "),t("p",[a._v("本文档将描述部署一个应用的执行过程。包括以下步骤："),t("br"),a._v(" "),t("a",{attrs:{href:"#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2"}},[a._v("安装部署")]),t("br"),a._v(" "),t("a",{attrs:{href:"#%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8"}},[a._v("准备服务器")]),t("br"),a._v(" "),t("a",{attrs:{href:"#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E7%89%A9%E7%90%86%E9%9B%86%E7%BE%A4"}},[a._v("注册部署应用的物理集群")]),t("br"),a._v(" "),t("a",{attrs:{href:"#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E8%99%9A%E6%8B%9F%E9%9B%86%E7%BE%A4"}},[a._v("注册部署应用的虚拟集群")]),t("br"),a._v(" "),t("a",{attrs:{href:"#%E5%87%86%E5%A4%87%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83"}},[a._v("准备部署应用的运行环境")]),t("br"),a._v(" "),t("a",{attrs:{href:"#%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8"}},[a._v("部署应用")]),t("br"),a._v(" "),t("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E7%BB%93%E6%9E%9C"}},[a._v("查看应用的部署结果")])]),a._v(" "),t("blockquote",[t("p",[a._v("“注册部署应用的物理集群、注册部署应用的虚拟集群”，这两个步骤任选其中一步执行成功后，即可进入“准备部署应用的运行环境”步骤。")])]),a._v(" "),t("h2",{attrs:{id:"安装部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装部署"}},[a._v("#")]),a._v(" 安装部署")]),a._v(" "),t("p",[a._v("以阿里云为例描述在公有云部署 Nautes 的过程，详情参考 "),t("RouterLink",{attrs:{to:"/guide/user-guide/installation.html"}},[a._v("安装部署")]),a._v("。")],1),a._v(" "),t("p",[a._v("安装部署成功后，将部署众多组件。其中，GitLab 是租户的代码托管平台，用于存储租户的配置库，IT 系统的源代码、部署配置和流水线代码等。Vault 是一款安全地存储和管理敏感数据的开源工具，可以和 Kubernetes 无缝集成。ArgoCD 是 Kubernetes 原生的持续部署工具，用于自动部署并确保 Kubernetes 集群中的应用程序配置与 Git 存储库中的配置声明一致。Dex 是一个使用 OpenID Connect (OIDC) 协议提供身份验证和授权服务的开源工具，客户端只需要与 Dex 对接一次，即可通过 Dex 访问后端的各种组件。每个租户只有一个租户管理集群，负责初始化该租户的所有运行集群，并协调各种组件，以向目标集群实施自动化部署。")]),a._v(" "),t("h2",{attrs:{id:"准备服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备服务器"}},[a._v("#")]),a._v(" 准备服务器")]),a._v(" "),t("p",[a._v("下文将以阿里云为例描述如何准备服务器，是部署应用的前提。如果已存在服务器，并且服务器中已安装 Kubernetes 集群，可省略该步骤。")]),a._v(" "),t("p",[a._v("先创建 ECS 云服务器，详情参考 "),t("a",{attrs:{href:"https://help.aliyun.com/document_detail/25422.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("云服务器 ECS"),t("OutboundLink")],1),a._v("。服务器创建成功后，在服务器上安装 K3s，命令如下：")]),a._v(" "),t("div",{staticClass:"language-Shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据实际情况，替换 --tls-san 参数值为服务器的公网 IP")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-sfL")]),a._v(" https://get.k3s.io "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("INSTALL_K3S_VERSION")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("v1.21.14+k3s1 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("INSTALL_K3S_EXEC")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"--tls-san xxx.xxx.xxx.xxx"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sh")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" - server "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--disable")]),a._v(" servicelb "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--disable")]),a._v(" traefik "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--disable")]),a._v(" metrics-server\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("HOME")]),a._v("}")]),a._v("/.kube\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" /etc/rancher/k3s/k3s.yaml "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("HOME")]),a._v("}")]),a._v("/.kube/k3s-config\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" /etc/rancher/k3s/k3s.yaml "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("HOME")]),a._v("}")]),a._v("/.kube/config\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("KUBECONFIG")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("HOME")]),a._v("}")]),a._v("/.kube/config\n")])])]),t("h2",{attrs:{id:"注册部署应用的物理集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册部署应用的物理集群"}},[a._v("#")]),a._v(" 注册部署应用的物理集群")]),a._v(" "),t("p",[a._v("下文将描述如何基于服务器来注册部署应用的物理集群。")]),a._v(" "),t("p",[a._v("先克隆 "),t("a",{attrs:{href:"https://gitlab.bluzin.io/nautes-labs/cli.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("注册集群模板"),t("OutboundLink")],1),a._v(" 的代码库到本地，并替换“examples/demo-cluster-physical-worker.yaml”模板文件的相关变量。下载 "),t("a",{attrs:{href:"https://gitlab.bluzin.io/nautes-labs/cli.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("命令行工具"),t("OutboundLink")],1),a._v("，并执行以下命令。命令执行成功后，会向服务器的集群中安装相关配置，并将该集群托管于管理集群。这时在服务器上的集群作为部署应用的运行集群使用。")]),a._v(" "),t("div",{staticClass:"language-Shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# examples/demo-cluster-host.yaml 指在模板代码库中模板文件的相对路径")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# gitlab-access-token 指 GitLab 访问令牌")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# api-server-address 指 API Server 的访问地址")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 模板文件中的 apiServer、kubeconfig，指安装在服务器上的集群信息。更多参数说明，参见模板文件的注释")]),a._v("\nnautes apply "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" examples/demo-cluster-physical-worker.yaml "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$gitlab")]),a._v("-access-token "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$api")]),a._v("-server-address\n")])])]),t("blockquote",[t("p",[a._v("GitLab 安装完成后，请先注册账号，再创建 personal access token。由于注册集群的账号必须拥有租户配置库的写入权限，同时 main 分支默认是保护分支，因此建议设置账号角色为租户配置库的 Maintainer。personal access token，详情参考 "),t("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Personal access tokens"),t("OutboundLink")],1),a._v("。租户配置库的访问地址，详情参考 "),t("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看部署结果"}},[a._v("查看部署结果")]),a._v("。"),t("br"),a._v("\nAPI Server 支持 http 和 https 协议。如果使用 https，需要导入 pki.crt 证书到执行 API 的服务器。以 Windows 操作系统的本地 PC 机为例，需要导入证书到“受信任的根证书颁发机构”证书目录才能使用 https 协议的 API Server。关于 API Server 的访问地址和 pki.crt 的下载地址，详情参考 "),t("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看部署结果"}},[a._v("安装部署")]),a._v("。")],1)]),a._v(" "),t("h2",{attrs:{id:"注册部署应用的虚拟集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册部署应用的虚拟集群"}},[a._v("#")]),a._v(" 注册部署应用的虚拟集群")]),a._v(" "),t("p",[a._v("下文将描述如何基于服务器来注册部署应用的虚拟集群。")]),a._v(" "),t("p",[a._v("先克隆 "),t("a",{attrs:{href:"https://gitlab.bluzin.io/nautes-labs/cli.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("注册集群模板"),t("OutboundLink")],1),a._v(" 的代码库到本地，并替换“examples/demo-cluster-host.yaml”模板文件的相关变量。下载 "),t("a",{attrs:{href:"https://gitlab.bluzin.io/nautes-labs/cli.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("命令行工具"),t("OutboundLink")],1),a._v("，并执行以下命令。命令执行成功后，会向服务器中的集群安装相关配置，并将该集群托管于管理集群。这时在服务器上的集群作为虚拟集群的宿主集群。")]),a._v(" "),t("div",{staticClass:"language-Shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 模板文件中的 apiServer、kubeconfig，指安装在服务器上的集群信息。更多参数说明，参见模板文件的注释")]),a._v("\nnautes apply "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" examples/demo-cluster-host.yaml "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$gitlab")]),a._v("-access-token "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$api")]),a._v("-server-address\n")])])]),t("p",[a._v("然后在宿主集群上进一步安装虚拟集群。与前面的步骤类似，模板代码库中模板文件的相对路径是“examples/demo-cluster-virtual-worker.yaml”，当替换变量、执行命令等步骤执行成功之后，会向宿主集群中安装一套虚拟集群，并将虚拟集群托管于管理集群。这时该虚拟集群作为部署应用的运行集群使用。")]),a._v(" "),t("div",{staticClass:"language-Shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("nautes apply "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" examples/demo-cluster-virtual-worker.yaml "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$gitlab")]),a._v("-access-token "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$api")]),a._v("-server-address\n")])])]),t("blockquote",[t("p",[a._v("GitLab 账号、API Server 的注意事项，与 "),t("a",{attrs:{href:"#%E6%B3%A8%E5%86%8C%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E7%89%A9%E7%90%86%E9%9B%86%E7%BE%A4"}},[a._v("注册部署应用的物理集群")]),a._v(" 相同。")])]),a._v(" "),t("h2",{attrs:{id:"准备部署应用的运行环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备部署应用的运行环境"}},[a._v("#")]),a._v(" 准备部署应用的运行环境")]),a._v(" "),t("p",[a._v("对于微服务架构的 IT 系统准备部署应用的运行环境。在 Nautes 中，通过 Kubernetes 资源文件定义部署应用的运行环境配置，包括IT系统、微服务、微服务的代码库、IT系统的环境、负载IT系统的运行时环境等。")]),a._v(" "),t("p",[a._v("下文将描述通过命令行提交部署应用的 Kubernetes 资源文件。")]),a._v(" "),t("p",[a._v("先克隆 "),t("a",{attrs:{href:"https://gitlab.bluzin.io/nautes-labs/cli.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("配置模板库"),t("OutboundLink")],1),a._v(" 的代码库到本地，批量替换“examples/demo-product.yaml”中的变量 suffix，并更新 Environment 资源的 cluster 值为运行集群的名称。下载 "),t("a",{attrs:{href:"https://gitlab.bluzin.io/nautes-labs/cli.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("命令行工具"),t("OutboundLink")],1),a._v("，执行以下命令。命令执行成功后，将向 GitLab 代码库中生成 Kubernetes 资源文件，并基于这些文件在 GitLab 生成与IT系统相关的群组和代码库、在指定运行集群上安装 IT 系统的部署运行时环境。")]),a._v(" "),t("div",{staticClass:"language-Shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# “examples/demo-product.yaml” 指配置模板库中模板文件的相对路径")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# gitlab-access-token 是 GitLab 访问令牌")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# api-server-address 是 API Server 的访问地址")]),a._v("\nnautes apply "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" examples/demo-product.yaml "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$gitlab")]),a._v("-access-token "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$api")]),a._v("-server-address\n")])])]),t("blockquote",[t("p",[a._v("在 GitLab 中，一个 IT 系统映射一个 group ，每个 group 有一个名称为 default.project 的默认代码库，用于存储 IT 系统运行环境的资源文件。"),t("br"),a._v("\nGitLab 账号需要拥有 default.project 代码库的写入权限，由于 main 分支默认是保护分支，因此建议设置账号角色为 group 成员的 Maintainer。关于 personal access token，详情参考 "),t("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Personal access tokens"),t("OutboundLink")],1),a._v("。")])]),a._v(" "),t("h2",{attrs:{id:"部署应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署应用"}},[a._v("#")]),a._v(" 部署应用")]),a._v(" "),t("p",[a._v("部署 IT 系统的资源清单，简称为“部署配置清单”，例如 deployment、service 等资源。下文将描述通过 Git CLI 提交部署配置清单到IT系统的代码库，IT 系统的部署运行时环境将监听这个代码库以部署应用。")]),a._v(" "),t("p",[a._v("先克隆 "),t("a",{attrs:{href:"https://github.com/liujunhong5891/demo-user-deployments",target:"_blank",rel:"noopener noreferrer"}},[a._v("部署示例"),t("OutboundLink")],1),a._v(" 代码库到本地，修改本地代码库中 ingress 资源的域名。")]),a._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 本示例代码库中 ingress 的相对路径为 /deployment/test/devops-sample-svc.yaml")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" networking.k8s.io/v1\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Ingress\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" ks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("sample"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("dev\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("rules")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据运行集群的IP地址，替换host的域名，即将“119-8-58-20”替换为运行集群的IP")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" devops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("sample.119"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("58"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("20.nip.io\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("paths")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("...")]),a._v("\n")])])]),t("p",[a._v("修改本地 Git 客户端配置，将 IT 系统的 GitLab 代码库设置为远程仓库，再 push 部署配置清单到 IT 系统的代码库。推送成功后，将向 IT 系统的部署运行时环境部署应用。Git CLI 详情参考 "),t("a",{attrs:{href:"https://docs.gitlab.com/ee/tutorials/make_your_first_git_commit.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("GitLab"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("div",{staticClass:"language-Shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 以下为产品的 GitLab 代码库，用于存储产品的部署配置清单")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote set-url origin xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n")])])]),t("blockquote",[t("p",[a._v("推送部署配置清单的 GitLab 账号需要拥有存储部署配置清单代码库的写入权限。")])]),a._v(" "),t("h2",{attrs:{id:"查看应用的部署结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看应用的部署结果"}},[a._v("#")]),a._v(" 查看应用的部署结果")]),a._v(" "),t("p",[a._v("可以通过 ArgoCD 控制台或者 kubectl 命令行来查看 IT 系统的部署结果，并且只能查看和管理被授权 IT 系统的相关资源。下文将描述如何通过 ArgoCD 查看部署结果。")]),a._v(" "),t("p",[a._v("访问安装在运行集群中的 "),t("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看部署结果"}},[a._v("ArgoCD 控制台")]),a._v("，点击 LOG IN VIA DEX 进行统一认证，如果在当前浏览器会话中未登录过 GitLab，那么需要填写 GitLab 账号密码进行登录。登录成功后页面会自动跳转到 ArgoCD 控制台。在 ArgoCD 控制台中将呈现被授权 IT 系统相关的 ArgoCD applications，可以查看和管理相关资源。点击某个 ArgoCD application 卡片，将呈现该 application 的资源清单，可以查看资源的 YAML、事件、日志等，并对该资源执行同步、重启、删除等操作。\n点击 ArgoCD 控制台左侧菜单栏的“设置”，可以查看被授权IT 系统相关的 ArgoCD projects。")],1)])}),[],!1,null,null,null);t.default=r.exports}}]);