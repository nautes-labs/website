(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{298:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"维护产品"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#维护产品"}},[t._v("#")]),t._v(" 维护产品")]),t._v(" "),a("p",[t._v("在开始本节之前，请确保您已阅读 "),a("RouterLink",{attrs:{to:"/guide/user-guide/main-process.html"}},[t._v("主体流程")]),t._v(" 章节，了解部署应用的主体流程 和相关术语。")],1),t._v(" "),a("p",[t._v("在微服务架构中，一个IT系统由多个微服务组成，每个微服务有独立的代码库。在Nautes中，“产品”表示一个IT系统，“项目”表示一个微服务。因此，一个产品可以包含多个项目，每个项目有独立的代码库。\n实施CI/CD活动时，所有操作都基于产品和项目进行，这意味着需要维护与之相关的信息以供实施 CI/CD 活动使用，并确保这些信息与IT系统的微服务架构保持一致。此外，用户可以是产品成员或者项目成员，用户所属的产品或项目将决定其拥有哪些权限和角色。")]),t._v(" "),a("p",[t._v("下面将详细介绍如何维护产品以及相关规则。维护产品有多种方式，包括命令行、API 接口等，下文将描述通过 API 接口的方式维护产品。")]),t._v(" "),a("h2",{attrs:{id:"维护产品-api-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#维护产品-api-接口"}},[t._v("#")]),t._v(" 维护产品（API 接口）")]),t._v(" "),a("h3",{attrs:{id:"创建产品"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建产品"}},[t._v("#")]),t._v(" 创建产品")]),t._v(" "),a("p",[t._v("在开展 CI/CD 活动之前，需要先创建一个新的产品。步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("访问 "),a("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看安装结果"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.product.v1.Product；选择 POST 接口，点击 try it out，在 product_name 参数中输入产品名称，点击 execute，生成 API 请求的代码示例。")],1),t._v(" "),a("li",[t._v("访问 "),a("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看安装结果"}},[t._v("GitLab Web UI")]),t._v("，获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Personal access tokens"),a("OutboundLink")],1),t._v("。")],1),t._v(" "),a("li",[t._v("将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 请求以新增产品。更新后的 API 请求的代码示例："),a("div",{staticClass:"language-Shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 实操过程中根据实际情况替换 URL 地址和相关参数")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# “git.gitlab.name” 是产品名称，“git.gitlab.path” 是产品路径，“git.gitlab.visibility”是产品的可见性，比如 private 或者 public  ")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-X")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HTTP://xxx.xxx.xxx.xxx:xxxxx/api/v1/products/product-demo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'accept: application/json'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type: application/json'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxx'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n "git": {\n     "gitlab": {\n         "name": "product-demo",\n         "path": "product-demo",\n         "visibility": "private",\n         "description": "product-demo"\n         }\n     }\n }\'')]),t._v("\n")])])]),t._v("请求成功后，将生成一个产品，同时在 GitLab 中根据产品参数生成对应的 group、以及这个 group 中名称为 default.project 的代码库，一个产品有且只有一个 default.project 代码库。default.project 代码库用于存储产品的配置清单，系统将根据这份清单自动生成产品的部署运行时环境。")])]),t._v(" "),a("h3",{attrs:{id:"删除产品"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除产品"}},[t._v("#")]),t._v(" 删除产品")]),t._v(" "),a("p",[t._v("由于产品可能关联多个资源，在删除产品之前，需要先删除与该产品相关的所有资源，例如项目、代码库和环境等。通常这种情况发生在产品生命周期结束之后，产品只会剩下一个名称为 default.project 的空代码库。步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("访问 "),a("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看安装结果"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.product.v1.Product；选择 DELETE 接口，点击 try it out，在 product_name 参数中输入产品名称，点击 execute，生成 API 请求的代码示例。详情参考 "),a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BA%A7%E5%93%81"}},[t._v("创建产品的步骤1")]),t._v(" 。")],1),t._v(" "),a("li",[t._v("获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 "),a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BA%A7%E5%93%81"}},[t._v("创建产品的步骤2")]),t._v("。只有拥有产品的 owner 角色权限或者是 GitLab 管理员权限的用户账号可以删除产品。")]),t._v(" "),a("li",[t._v("将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 来删除产品。请求成功后，该产品及其相关资源将被删除，包括 GitLab 中对应的 group 和名称为 default.project 的代码库。")])]),t._v(" "),a("h3",{attrs:{id:"查询产品"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询产品"}},[t._v("#")]),t._v(" 查询产品")]),t._v(" "),a("p",[t._v("查询产品有两个 API 接口，分别是查询产品列表、查询产品详情，用于查询用户被授权的产品信息。"),a("br"),t._v("\n查询产品列表的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("访问 "),a("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看安装结果"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.product.v1.Product；选择相对路径是 /api/v1/products 的 GET 接口，点击 try it out，点击 execute，生成 API 请求的代码示例。详情参考 "),a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BA%A7%E5%93%81"}},[t._v("创建产品的步骤1")]),t._v("。")],1),t._v(" "),a("li",[t._v("获取请求 API 的 access token，作为 API 请求的请求头参数。详情参考 "),a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BA%A7%E5%93%81"}},[t._v("创建产品的步骤2")]),t._v("。只有当用户是产品成员时，才能查询到相关产品信息。")]),t._v(" "),a("li",[t._v("将前置步骤获取的 access token 作为 API 请求的请求头参数，通过 curl 命令，或者 Postman、JMeter 等工具执行 API 以查询产品。请求成功后，如果用户是某些产品的成员，将返回产品信息。")])]),t._v(" "),a("p",[t._v("查询产品详情的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("访问 "),a("RouterLink",{attrs:{to:"/guide/user-guide/installation.html#查看安装结果"}},[t._v("Swagger UI")]),t._v("，选择右上角 select a definition 下拉框中的 api.product.v1.Product；选择相对路径是 /api/v1/products/{productName} 的 GET 接口，点击 try it out，在 product_name 参数中输入产品名称，点击 execute，生成 API 请求的代码示例。详情参考 "),a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BA%A7%E5%93%81"}},[t._v("创建产品的步骤1")]),t._v(" 。")],1),t._v(" "),a("li",[t._v("其余步骤与“查询产品列表”相同，不再赘述。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);